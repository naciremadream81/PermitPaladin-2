version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: permitpaladin-postgres
    environment:
      POSTGRES_DB: permitpaladin
      POSTGRES_USER: permitpaladin
      POSTGRES_PASSWORD: permitpaladin123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U permitpaladin -d permitpaladin"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - permitpaladin-network

  app:
    build: .
    container_name: permitpaladin-app
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://permitpaladin:permitpaladin123@postgres:5432/permitpaladin
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-session-key-change-this}
      PORT: 3000
      HOST: 0.0.0.0
      FILE_STORAGE_PATH: /app/uploads
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_HEALTH_CHECKS: ${ENABLE_HEALTH_CHECKS:-true}
      ENABLE_COMPRESSION: ${ENABLE_COMPRESSION:-true}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES:-pdf,doc,docx,xls,xlsx,jpg,jpeg,png,gif,txt}
    volumes:
      - ./uploads:/app/uploads
      - ./migrations:/app/migrations
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - permitpaladin-network

  # Optional: Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: permitpaladin-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - permitpaladin-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: permitpaladin-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # For HTTPS certificates
    ports:
      - "80:80"
      - "443:443"  # Uncomment when you have SSL certificates
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    networks:
      - permitpaladin-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  permitpaladin-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
